<?php

/**
 * @file
 * Functionality for locking an object for a time period via XACML.
 */

define('ISLANDORA_OBJECT_LOCK_EXPIRY_PRED', 'lock-expiry');
define('ISLANDORA_OBJECT_LOCK_USER_PRED', 'locked-by');
define('ISLANDORA_OBJECT_LOCK_IS_MANAGEMENT_RULE_PRED', 'isManagementRule');
define('ISLANDORA_OBJECT_LOCK_IS_USER_MANAGEMENT_RULE_PRED', 'isUserManagementRule');

/**
 * Implements hook_menu().
 */
function islandora_object_lock_menu() {
  $items = array();
  $items['admin/islandora/object-lock'] = array(
    'title' => 'Object locking',
    'access arguments' => array('administer islandora object locking'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_object_lock_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%islandora_object/manage/datastreams/locking/lock'] = array(
    'title' => 'Lock object',
    'file' => 'includes/lock.form.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_object_lock_form_lock', 2, 'lock'),
    'type' => MENU_LOCAL_ACTION,
    'access callback' => 'islandora_object_lock_access_lock',
    'access arguments' => array(2, 'lock'),
  );
  $items['islandora/object/%islandora_object/manage/datastreams/locking/unlock'] = array(
    'title' => 'Remove object lock',
    'file' => 'includes/lock.form.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_object_lock_form_lock', 2, 'unlock'),
    'type' => MENU_LOCAL_ACTION,
    'access callback' => 'islandora_object_lock_access_lock',
    'access arguments' => array(2, 'unlock'),
  );
  return $items;
}

/**
 * Implements hook_islandora_basic_collection_build_manage_object().
 */
function islandora_object_lock_islandora_basic_collection_build_manage_object($form_state, $object) {
  $return_form['manage_collection_object']['manage_obj_lock'] = array(
    '#id' => 'manage-obj-lock',
    '#group' => 'manage_obj_object',
    '#access' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Manage Lock Objects'),
    'form' => drupal_get_form('islandora_object_lock_manage_lock_form', $object),
  );
  $return_form['manage_collection_object']['manage_obj_lock']['form']['#submit'][] = 'islandora_object_lock_manage_lock_form_submit';
  return $return_form;
}

/**
 * Create the manage_lock_form.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The current $form_state.
 * @param AbstractObject $object
 *   The Fedora object in qustion.
 *
 * @return array
 *   The form to be appended to the manage object.
 */
function islandora_object_lock_manage_lock_form(array $form, array &$form_state, AbstractObject $object) {
  $form_state['storage'] = array('pid' => $object->id);
  $global_lock_length = variable_get('islandora_object_lock_duration', 30);
  $str = str_replace(array(':'), array('_'), $object->id);
  return array(
    'text_field' => array(
      '#type' => 'textfield',
      '#title' => t('Collection level Lock duration (minutes)'),
      '#default_value' => variable_get('islandora_object_lock_' .
        str_replace(array(':'), array('_'), $object->id) . '_duration', $global_lock_length),
      '#description' => t('Override default lock length for all children of this collection (objects and subcollections).'),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Set collection level lock duration'),
    ),
  );
}

/**
 * Submit handler for manage_lock_form.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The current $form_state.
 */
function islandora_object_lock_manage_lock_form_submit(array $form, array &$form_state) {
  $str = str_replace(array(':'), array('_'), $form_state['storage']['pid']);
  variable_set('islandora_object_lock_' . $str . '_duration', $form['text_field']['#value']);
}

/**
 * Implements hook_permission().
 */
function islandora_object_lock_permission() {
  return array(
    'administer islandora object locking' => array(
      'title' => t('Administer Islandora object locking'),
    ),
    'add or remove islandora object lock' => array(
      'title' => t('Add or remove Islandora object locks'),
    ),
    'manage islandora object lock' => array(
      'title' => t('Manage Islandora object locks'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function islandora_object_lock_cron() {
  $repository = new IslandoraTuque();
  $lock_uri = ISLANDORA_RELS_EXT_URI;
  $lock_pred = ISLANDORA_OBJECT_LOCK_EXPIRY_PRED;
  $now = gmdate("Y-m-d\TH:i:s\Z");
  $max_per_cron = variable_get('islandora_object_lock_cron_throttle', 30);
  $query = <<<EOQ
    PREFIX is: <$lock_uri>
    SELECT ?expired ?date
    FROM <#ri>
    WHERE {
      ?expired is:$lock_pred ?date .
      FILTER(?date < '$now'^^xsd:dateTime)
    }
    LIMIT $max_per_cron
EOQ;
  $results = $repository->repository->ri->sparqlQuery($query);
  if (count($results)) {
    drupal_save_session(FALSE);

    $original_user = $GLOBALS['user'];
    $GLOBALS['user'] = user_load(1);

    $loop_count = ($max_per_cron > count($results)) ? count($results) : $max_per_cron;
    for ($i = 0; $i < $loop_count; $i++) {
      $pid = $results[$i]['expired']['value'];
      islandora_object_lock_remove_object_lock($pid);
      watchdog('islandora_object_lock', 'Object lock removed by cron for PID: @pid', array('@pid' => $pid));
    }

    $GLOBALS['user'] = $original_user;
    drupal_save_session(TRUE);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Catch datastream editing operation and lock object automatically. Enforce
 * locks if a lock has been placed already by another user.
 */
function islandora_object_lock_form_xml_form_builder_edit_datastream_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'islandora', 'includes/utitilies');
  $pid = arg(2);
  if (islandora_is_valid_pid($pid)) {
    $object = islandora_object_load($pid);
    $locked = islandora_object_lock_is_locked($object);
    if ($locked) {
      $username = islandora_object_lock_get_lock_username($object);
      global $user;
      if ($username != $user->name) {
        drupal_set_message(t('This object has been locked by another user.'), 'error');
        drupal_goto("islandora/object/$object->id/manage/datastreams");
      }
    }
    else {
      islandora_object_lock_set_object_lock($object->id);
      $form['#submit'][] = 'islandora_object_lock_release_form_builder_lock';
      drupal_set_message(t('The object has been locked.'));
    }
  }
}

/**
 * Implements hook_islandora_datastream_modified().
 *
 * Release a lock if a datastream is modified.
 */
function islandora_object_lock_islandora_datastream_modified(AbstractFedoraObject $object, AbstractFedoraDatastream $datastream) {
  $excluded_datastreams = array('RELS-EXT', 'POLICY');
  if (!in_array($datastream->id, $excluded_datastreams)) {
    $locked = islandora_object_lock_is_locked($object);
    if ($locked) {
      islandora_object_lock_remove_object_lock($object->id);
    }
  }
}

/**
 * Lock an object.
 *
 * @param string $pid
 *   The object's PID.
 * @param stdClass $user
 *   The user object for the lock owner.
 * @param int $duration
 *   The length of the lock in minutes.
 */
function islandora_object_lock_set_object_lock($pid, $user = NULL, $duration = NULL) {
  if (is_null($user)) {
    global $user;
  }

  if (is_null($duration)) {
    $duration = islandora_object_lock_compute_duration($pid);
  }

  $expiry_time = time() + (60 * $duration);
  $expiry_date = gmdate("Y-m-d\TH:i:s\Z", $expiry_time);
  $object = islandora_object_load($pid);

  $xacml = new IslandoraXacml($object);

  $management_rule = FALSE;
  $user_in_rule = FALSE;
  if ($xacml->managementRule->isPopulated()) {
    $management_rule = TRUE;
    $users_in_rule = $xacml->managementRule->getUsers();
    if (in_array($user->name, $users_in_rule)) {
      $user_in_rule = TRUE;
    }
  }

  $xacml->managementRule->addUser($user->name);
  $xacml->writeBackToFedora();

  $object->relationships->add(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_EXPIRY_PRED, $expiry_date, RELS_TYPE_DATETIME);
  $object->relationships->add(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_USER_PRED, $user->name, RELS_TYPE_PLAIN_LITERAL);

  if ($management_rule) {
    $object->relationships->add(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_IS_MANAGEMENT_RULE_PRED, "TRUE", RELS_TYPE_PLAIN_LITERAL);
    if ($user_in_rule) {
      $object->relationships->add(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_IS_USER_MANAGEMENT_RULE_PRED, "TRUE", RELS_TYPE_PLAIN_LITERAL);
    }
  }
  watchdog('Object Locked', "Object $pid has been locked for $duration min");
}

/**
 * Remove a lock from an object.
 *
 * @param string $pid
 *   The object's PID.
 */
function islandora_object_lock_remove_object_lock($pid) {
  $object = islandora_object_load($pid);
  $locking_user = islandora_object_lock_get_lock_username($object);

  $object->relationships->remove(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_EXPIRY_PRED);
  $object->relationships->remove(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_USER_PRED);

  $xacml = new IslandoraXacml($object);

  $was_management_rule = $object->relationships->get(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_IS_MANAGEMENT_RULE_PRED, NULL, RELS_TYPE_PLAIN_LITERAL);
  if (!empty($was_management_rule)) {
    $object->relationships->remove(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_IS_MANAGEMENT_RULE_PRED);
    $was_user_management_rule = $object->relationships->get(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_IS_USER_MANAGEMENT_RULE_PRED, NULL, RELS_TYPE_PLAIN_LITERAL);
    if (empty($was_user_management_rule)) {
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_IS_USER_MANAGEMENT_RULE_PRED);
      $xacml->managementRule->removeUser($locking_user);
    }
  }
  else {
    $xacml->managementRule->clear();
  }

  $xacml->writeBackToFedora();
}

/**
 * Access callback for setting or removing locks.
 *
 * @param AbstractFedoraObject $object
 *   The object that is being locked/unlocked.
 * @param string $op
 *   The operation, values may be: lock, unlock.
 *
 * @return bool
 *   TRUE if access is granted.
 */
function islandora_object_lock_access_lock(AbstractFedoraObject $object, $op = NULL) {
  $perm = FALSE;

  $locked = islandora_object_lock_is_locked($object);
  $can_lock = user_access('add or remove islandora object lock');
  $can_manage = user_access('manage islandora object lock');

  if ($op == 'lock' && !$locked && ($can_lock || $can_manage)) {
    $perm = TRUE;
  }

  if ($op == 'unlock' && $locked && ($can_lock || $can_manage)) {
    $perm = TRUE;
  }

  if (is_null($op) && ($can_lock || $can_manage)) {
    $perm = TRUE;
  }

  if (!islandora_object_access(ISLANDORA_METADATA_EDIT, $object)) {
    $perm = FALSE;
  }

  return $perm;
}

/**
 * Check if an object is locked.
 *
 * @param AbstractFedoraObject $object
 *   The object to check.
 *
 * @return bool
 *   TRUE if the object is locked.
 */
function islandora_object_lock_is_locked(AbstractFedoraObject $object) {
  $lock = $object->relationships->get(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_EXPIRY_PRED, NULL, RELS_TYPE_PLAIN_LITERAL);
  if (count($lock) < 1) {
    return FALSE;
  }
  else {
    $expiry_time = strtotime($lock[0]['object']['value']);
    if ($expiry_time < time()) {
      islandora_object_lock_remove_object_lock($object->id);
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
}

/**
 * Determine the duration an object should be locked for.
 *
 * @param string $pid
 *   The object's PID.
 *
 * @return int
 *   The duration in minutes.
 */
function islandora_object_lock_compute_duration($pid) {
  // @TODO: Do a collection check
  // Get the $pid parents, and use the highest lock length if it is not
  // the same as the global.
  $object = islandora_object_load($pid);
  $parent_pids = islandora_object_lock_get_parent_pids($object);
  $global_default_lock = variable_get('islandora_object_lock_duration', 30);
  $all_locks = array();
  foreach ($parent_pids as $parent_pid) {
    $parent_lock_length = variable_get('islandora_object_lock_' . str_replace(array(':'), array('_'), $parent_pid) . '_duration',
      $global_default_lock);
    array_push($all_locks, $parent_lock_length);
  }
  $duration = max($all_locks);
  return $duration;
}

/**
 * Return the username of an object's lock owner.
 *
 * @param AbstractFedoraObject $object
 *   The Fedora object.
 *
 * @return string
 *   The username.
 */
function islandora_object_lock_get_lock_username(AbstractFedoraObject $object) {
  $users = $object->relationships->get(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_USER_PRED, NULL, RELS_TYPE_PLAIN_LITERAL);
  return $users[0]['object']['value'];
}

/**
 * Return the expiry date for a lock.
 *
 * @param AbstractFedoraObject $object
 *   The Fedora object.
 *
 * @return string
 *   The expiry date.
 */
function islandora_object_lock_get_lock_expiry(AbstractFedoraObject $object) {
  $expiry = $object->relationships->get(ISLANDORA_RELS_EXT_URI, ISLANDORA_OBJECT_LOCK_EXPIRY_PRED, NULL, RELS_TYPE_DATETIME);
  return $expiry[0]['object']['value'];
}

/**
 * Gets a list of all parent pids.
 *
 * @param AbstractObject $object
 *   The object.
 *
 * @return array
 *   The list of parent PIDs.
 */
function islandora_object_lock_get_parent_pids(AbstractObject $object) {
  $results = array_merge(
    $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection'),
    $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOf'));
  $map_results = function($o) {
    return $o['object']['value'];
  };
  $collections = array_map($map_results, $results);
  return array_unique(array_filter($collections));
}
